package easy;
/**
 * 389. Given two strings s and t which consist of only lowercase letters.

String t is generated by random shuffling string s and then add one more letter at a random position.

Find the letter that was added in t.

Example:

Input:
s = "abcd"
t = "abcde"

Output:
e

Explanation:
'e' is the letter that was added.
 */
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class FindDifference {
    public char findTheDifference(String s, String t) {
        char res = 0; // Initialize to 0
        
        for (int i = 0; i < s.length(); i++) {
            res ^= s.charAt(i);
        }
        for (int i = 0; i < t.length(); i++) {
            res ^= t.charAt(i);
        }
        
        return res;
    }
    public char findTheDifference2(String s, String t) {
        char[] sc = s.toCharArray();
        char[] tc = t.toCharArray();
        
        Arrays.sort(sc);
        Arrays.sort(tc);
        
        int i = 0, j = 0;
        
        while (i < sc.length && j < tc.length) {
            if (sc[i] == tc[j]) {
                i++;
                j++;
            } else {
                return s.length() > t.length() ? sc[i] : tc[j];
            }
        }
        return s.length() > t.length() ? sc[s.length() - 1] : tc[t.length() - 1];
    }
    public char findTheDifference1(String s, String t) {
        Map<Character, Integer> map = new HashMap<Character, Integer>();
        
        String longer = s.length() > t.length() ? s : t;
        String shorter = s.length() > t.length() ? t : s;
        for (int i = 0; i < longer.length(); i++) {
            char c = longer.charAt(i);
            if (map.containsKey(c)) {
                map.put(c, map.get(c) + 1);
            } else {
                map.put(c, 1);
            }
        }
        
        for (int i = 0; i < shorter.length(); i++) {
            char c = shorter.charAt(i);
            int count = map.get(c);
            
            if (count == 1) {
                map.remove(c);
            } else {
                map.put(c, map.get(c) - 1);
            }
        }
        // Not nice
//        for (Character c : map.keySet()) {
//            return c;
//        }
        char key = map.keySet().iterator().next();
//        Map.Entry<Character, Integer> entry = map.entrySet().iterator().next();
//        char key= entry.getKey();
        return key;
    }
}
